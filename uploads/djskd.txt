package com.codenal.alarms.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.codenal.alarms.service.AlarmsService;

@RestController
@RequestMapping("/api/alarms")
public class AlarmsApiController {

	private final AlarmsService alarmsService;

	@Autowired
	public AlarmsApiController(AlarmsService alarmsService) {
		this.alarmsService = alarmsService;
	}

	// 알림 읽음 처리 (N -> Y)
	 @PostMapping("/read/{alarmNo}")
	    @ResponseBody
	    public ResponseEntity<String> markAlarmAsRead(@PathVariable Long alarmNo) {
	        try {
	            alarmsService.markAlarmAsRead(alarmNo);
	            return ResponseEntity.ok("알림이 읽음 처리되었습니다.");
	        } catch (Exception e) {
	            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("알림 처리 중 오류가 발생했습니다.");
	        }
	    }

	
	// 알림 삭제
	 @PostMapping("/delete/{alarmNo}")
	    @ResponseBody
	    public ResponseEntity<String> deleteAlarm(@PathVariable Long alarmNo) {
	        try {
	            alarmsService.deleteAlarm(alarmNo);
	            return ResponseEntity.ok("알림이 삭제되었습니다.");
	        } catch (Exception e) {
	            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("알림 삭제 중 오류가 발생했습니다.");
	        }
	    }
}



package com.codenal.alarms.controller;

import com.codenal.alarms.domain.AlarmsDto;
import com.codenal.alarms.service.AlarmsService;
import com.codenal.alarms.service.MeetingRoomAlarm;
import com.codenal.employee.domain.Employee;
import com.codenal.employee.service.EmployeeService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.util.List;
import java.util.Optional;

@Controller
public class AlarmsViewController {

	private static final Logger logger = LoggerFactory.getLogger(AlarmsViewController.class);

	private final AlarmsService alarmsService;
	private final EmployeeService employeeService;
	@Autowired
	public AlarmsViewController(AlarmsService alarmsService, EmployeeService employeeService) {
		System.out.println("아오 알림 서비스는 들어오냐? " + (alarmsService != null)); 
		this.alarmsService = alarmsService;
		this.employeeService = employeeService;
	}

	// 알림 조회
	@GetMapping("/alarms")
    public String getAlarms(Model model, Principal principal) {
        // 현재 로그인한 사용자의 ID를 가져옴
        Long empId = employeeService.getEmpIdByPrincipal(principal);
        List<AlarmsDto> alarms = alarmsService.getAlarmsByEmpId(empId);
        model.addAttribute("alarms", alarms);
        return "partials/topbar";  // 알림 목록을 표시할 HTML 경로
    }




}






package com.codenal.alarms.domain;

import java.io.Serializable;
import java.time.LocalDateTime;
import com.codenal.employee.domain.Employee;
import com.fasterxml.jackson.annotation.JsonFormat;

import jakarta.persistence.*;
import lombok.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;


@Entity
@Table(name = "alarms")
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor
@Getter
@Setter
@Builder
public class Alarms implements Serializable {
    private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "alarm_no")
	private Long alarmNo;  // 알림 번호 

	@ManyToOne
	@JoinColumn(name = "emp_id")
	private Employee employee;  // Employee와 조인

	@Column(name = "alarm_title")
	@NotNull(message = "알림 제목은 필수입니다.")
	private String alarmTitle;  // 알림 제목

	@Column(name = "alarm_context")
	private String alarmContext;  // 알림 내용

	@Column(name = "alarm_type")
	@Pattern(regexp = "calendar|meeting|approval", message = "유효하지 않은 알림 유형입니다.")
	private String alarmType;  // 알림 유형

	@Column(name = "alarm_reference_no")
	private Long alarmReferenceNo;  // 알림 참조 번호

	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	@Column(name = "alarm_create_time")
	private LocalDateTime alarmCreateTime; // 알림 생성 시간

	@JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
	@Column(name = "alarm_read_time")
	private LocalDateTime alarmReadTime;  // 알림 확인 시간

	@Column(name = "alarm_is_read")
	private String alarmIsRead;  // 알림 확인 여부 ('Y' 또는 'N')

	@Column(name = "alarm_is_deleted")
	private String alarmIsDeleted;  // 알림 삭제 여부 ('Y' 또는 'N')

	@Column(name = "alarm_url")
	private String alarmUrl;  // 관련 알림 URL
}



package com.codenal.alarms.domain;

import java.time.LocalDateTime;


import com.codenal.employee.domain.Employee;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Data
@Builder
public class AlarmsDto {

    private Long alarmNo;            // 알림 번호
    private Long empId;              // 사원 ID
    private String alarmTitle;       // 알림 제목
    private String alarmContext;     // 알림 내용
    private String alarmType;        // 알림 유형
    private Long alarmReferenceNo;   // 알림 참조 번호
    private LocalDateTime alarmCreateTime; // 알림 생성 시간
    private LocalDateTime alarmReadTime;   // 알림 확인 시간
    private String alarmIsRead;     // 알림 확인 여부
    private String alarmIsDeleted;  // 알림 삭제 여부
    private String alarmUrl;        // 관련 알림 URL

    // 회의실 정보 추가
    private String roomName;        // 회의실 이름
    private String roomLocation;    // 회의실 장소
    private String alarmTime;       // 예약 시간

   
    public static AlarmsDto fromEntity(Alarms alarms) {
        if (alarms == null) {
            return null;
        }

        return AlarmsDto.builder()
                .alarmNo(alarms.getAlarmNo())
                .empId(alarms.getEmployee() != null ? alarms.getEmployee().getEmpId() : null)
                .alarmTitle(alarms.getAlarmTitle())
                .alarmContext(alarms.getAlarmContext())
                .alarmType(alarms.getAlarmType())
                .alarmReferenceNo(alarms.getAlarmReferenceNo())
                .alarmCreateTime(alarms.getAlarmCreateTime())
                .alarmReadTime(alarms.getAlarmReadTime())
                .alarmIsRead(alarms.getAlarmIsRead())
                .alarmIsDeleted(alarms.getAlarmIsDeleted())
                .alarmUrl(alarms.getAlarmUrl())
                .build();
    }

   
    public static AlarmsDto fromEntity(Alarms alarms, String roomName, String roomLocation, String alarmTime) {
        AlarmsDto dto = fromEntity(alarms);
        dto.setRoomName(roomName);
        dto.setRoomLocation(roomLocation);
        dto.setAlarmTime(alarmTime);
        return dto;
    }

    public Alarms toEntity(Employee employee) {
        return Alarms.builder()
                .alarmNo(this.alarmNo)
                .employee(employee)
                .alarmTitle(this.alarmTitle)
                .alarmContext(this.alarmContext)
                .alarmType(this.alarmType)
                .alarmReferenceNo(this.alarmReferenceNo)
                .alarmCreateTime(this.alarmCreateTime != null ? this.alarmCreateTime : LocalDateTime.now())
                .alarmReadTime(this.alarmReadTime)
                .alarmIsRead(this.alarmIsRead != null ? this.alarmIsRead : "N")
                .alarmIsDeleted(this.alarmIsDeleted != null ? this.alarmIsDeleted : "N")
                .alarmUrl(this.alarmUrl)
                .build();
    }
}


package com.codenal.alarms.domain;

public class AlarmType {

	public static final String CALENDAR = "calendar";         // 캘린더 알림
	public static final String MEETING = "meeting";           // 회의실 알림
	public static final String APPROVAL = "approval";         // 전자결재 알림

	private AlarmType() {
	}
}




package com.codenal.alarms.repository;

import com.codenal.alarms.domain.Alarms;
import com.codenal.employee.domain.Employee;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

@Repository
public interface AlarmsRepository extends JpaRepository<Alarms, Long> {

	List<Alarms> findByEmployee_EmpIdAndAlarmIsDeleted(Long empId, String alarmIsDeleted);

	Optional<Alarms> findById(Long alarmNo);

	List<Alarms> findByEmployee_EmpId(Long empId);
	
	List<Alarms> findByEmployee(Employee employee);

    // 해당 날짜의 오전 9시에 알림이 전송
    @Query("SELECT a FROM Alarms a WHERE a.alarmCreateTime >= :start AND a.alarmCreateTime < :end")
    List<Alarms> findAlarmsByDate(@Param("start") LocalDateTime start, @Param("end") LocalDateTime end);

    // 알림 삭제
    @Query("SELECT a FROM Alarms a WHERE a.alarmCreateTime < :date")
    List<Alarms> findAlarmsBeforeDate(@Param("date") LocalDateTime date);
    
    Optional<Alarms> findByAlarmReferenceNo(Long alarmReferenceNo);
    
    List<Alarms> findByEmployee_EmpIdOrderByAlarmCreateTimeDesc(Long empId);
}



package com.codenal.alarms.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.codenal.employee.domain.Employee;

@Repository
public interface EmpAlarmsRepository extends JpaRepository <Employee, Long>{

	Optional<Employee> findByEmpId(Long empId);
	
	Optional<Employee> findByEmpName(String empName);
	
}


package com.codenal.alarms.service;

import com.codenal.alarms.domain.AlarmType;
import com.codenal.alarms.domain.Alarms;
import com.codenal.alarms.domain.AlarmsDto;
import com.codenal.alarms.repository.AlarmsRepository;
import com.codenal.meeting.domain.MeetingRoom;
import com.codenal.meeting.domain.MeetingRoomReserve;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class AlarmsService {

	private static final Logger logger = LoggerFactory.getLogger(AlarmsService.class);
	private final AlarmsRepository alarmsRepository;

	@Autowired
	public AlarmsService(AlarmsRepository alarmsRepository) {
		this.alarmsRepository = alarmsRepository;
	}

	// 알림 생성
	@Transactional
	public void createMeetingRoomAlarm(MeetingRoomReserve reserve, MeetingRoom meet) {

		Optional<Alarms> existingAlarm = alarmsRepository.findByAlarmReferenceNo(reserve.getMeetingRoomReserveNo());
		if (existingAlarm.isPresent()) {
			// 이미 알림 생성 -> 생성 노
			return;
		}

		// DTO로 변환
		AlarmsDto alarmDto = AlarmsDto.fromEntity(
				Alarms.builder()
				.employee(reserve.getEmployee())
				.alarmTitle("회의실 예약 알림")
				.alarmContext("오늘 " + reserve.getMeetingRoomStartTime().toString() + "에 " 
						+ meet.getMeetingRoomName() + " " + meet.getMeetingRoomPlace() + "에서 예약이 있습니다.")
				.alarmType(AlarmType.MEETING.toString())
				.alarmReferenceNo(reserve.getMeetingRoomReserveNo())
				.alarmCreateTime(LocalDateTime.now())
				.alarmIsRead("N")
				.alarmIsDeleted("N")
				.alarmUrl("/meetingRoom/" + reserve.getMeetingRoomReserveNo())
				.build()
				);

		alarmsRepository.save(alarmDto.toEntity(reserve.getEmployee()));
	}

	// 예약 알림 (회의실 예약)
	public void createImmediateAlarm(MeetingRoomReserve reserve, MeetingRoom meet) {
		createMeetingRoomAlarm(reserve, meet);
	}

	// 미래 예약에 대한 알림 스케줄링
	@Transactional
	public void scheduleAlarm(MeetingRoomReserve reserve, MeetingRoom meet) {
		// TaskScheduler 등을 이용해 예약 날짜 오전 9시에 알림 생성하도록 스케줄링
		// 이 부분은 별도의 설정이 필요합니다.
	}

	// 알림 조회
	public List<AlarmsDto> getAlarmsByEmpId(Long empId) {
		List<Alarms> alarmsList = alarmsRepository.findByEmployee_EmpIdAndAlarmIsDeleted(empId, "N");
		return alarmsList.stream()
				.map(AlarmsDto::fromEntity)
				.collect(Collectors.toList());
	}

	// 알림 삭제
	@Transactional
	public void deleteAlarm(Long alarmNo) {
		Alarms alarm = alarmsRepository.findById(alarmNo)
				.orElseThrow(() -> new IllegalArgumentException("해당 알림을 찾을 수 없습니다."));
		alarm.setAlarmIsDeleted("Y");
		alarmsRepository.save(alarm);
	}

	// 알림 읽음 처리 (N -> Y)
	@Transactional
	public void markAlarmAsRead(Long alarmNo) {
		Alarms alarm = alarmsRepository.findById(alarmNo)
				.orElseThrow(() -> new IllegalArgumentException("해당 알림을 찾을 수 없습니다."));
		alarm.setAlarmIsRead("Y");
		alarm.setAlarmReadTime(LocalDateTime.now());
		alarmsRepository.save(alarm);
	}
}



package com.codenal.alarms.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.codenal.meeting.service.MeetingRoomService;
import com.codenal.meeting.domain.MeetingRoom;
import com.codenal.meeting.domain.MeetingRoomReserve;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;

@Service
public class MeetingRoomAlarm {

    private static final Logger logger = LoggerFactory.getLogger(MeetingRoomAlarm.class);

    @Autowired
    private MeetingRoomService meetingRoomService;
    
    @Autowired
    private AlarmsService alarmsService;
    

    // 매분 실행하도록 설정 (테스트용)
    @Scheduled(cron = "*/1 * * * * ?")
    public void sendMeetingRoomAlarms() {
        try {
            LocalDate today = LocalDate.now();
            List<MeetingRoomReserve> reservations = meetingRoomService.getReservationsForDate(today);
           // logger.info(reservations.size());

            for (MeetingRoomReserve reservation : reservations) {
                MeetingRoom meetingRoom = reservation.getMeetingRoom();
                if (meetingRoom == null) {
                    //logger.warn(reservation.getMeetingRoomReserveNo());
                    continue;
                }

            //    logger.info(meetingRoom.getMeetingRoomName(), meetingRoom.getMeetingRoomPlace());

                alarmsService.createMeetingRoomAlarm(reservation, meetingRoom);
             //   logger.info(reservation.getMeetingRoomReserveNo());
            }
        } catch (Exception e) {
          //  logger.error(e);
        }
    }

    // 예약 시점에 따라 즉시 알림을 생성
    public void createImmediateAlarm(MeetingRoomReserve reservation, MeetingRoom meet) {
        try {
            LocalDate today = LocalDate.now();
            LocalTime nineAM = LocalTime.of(9, 0);
            LocalDateTime now = LocalDateTime.now();

            if (reservation.getMeetingRoomReserveDate().isEqual(today) && now.toLocalTime().isAfter(nineAM)) {
                alarmsService.createMeetingRoomAlarm(reservation, meet); 
               // logger.info(reservation.getMeetingRoomReserveNo());
            }
        } catch (Exception e) {
           // logger.error(e);
        }
    }
}




package com.codenal.employee.service;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.codenal.alarms.repository.EmpAlarmsRepository;
import com.codenal.employee.domain.Employee;
import com.codenal.employee.domain.EmployeeDto;
import com.codenal.employee.repository.EmployeeRepository;

@Service
public class EmployeeService {
    
    @Autowired
    private EmployeeRepository employeeRepository;
    private EmpAlarmsRepository empAlarmsRepository;
    
    @Autowired
    public EmployeeService(EmployeeRepository employeeRepository, EmpAlarmsRepository empAlarmsRepository) {
        this.employeeRepository = employeeRepository; 
        this.empAlarmsRepository = empAlarmsRepository;
    }

    public void registerEmployee(EmployeeDto employeeDto) {
        // 비밀번호 암호화 제거, 원시 비밀번호를 그대로 사용
        Employee employee = employeeDto.toEntity();
        employeeRepository.save(employee);
    }

//    public Employee selectEmpId(String empId) {
//    	Employee emp = employeeRepository.findByEmpName(empId);
//    	return emp;
//    }
    

    public void saveEmployee(Employee employee) {
        employeeRepository.save(employee); // 데이터베이스에 변경 사항 저장
    }
    
    
    public Employee getEmployeeById(Long empId) {
        return employeeRepository.findByEmpId(empId);
    }

    // USER 권한이면서 본인을 제외한 재직중인 직원 모두 조회
    public List<EmployeeDto> getActiveEmployeeList(String username){
    	Long empId = Long.parseLong(username);
    	List<Employee> empList = employeeRepository.findAllActiveEmployees(empId);
    	List<EmployeeDto> dtoList = new ArrayList<EmployeeDto>();
    	for(Employee e : empList) {
    		EmployeeDto dto = new EmployeeDto().fromEntity(e);
    		dtoList.add(dto);
    	}
    	return dtoList;
    }
   
    public EmployeeDto getEmployeeDtoById(Long empId) {
        Employee employee = employeeRepository.findByEmpId(empId);
        if (employee != null) {
            return EmployeeDto.fromEntity(employee);
        }
        return null;
    }
    
    public Optional<Employee> findByEmpName(String username) {
        return empAlarmsRepository.findByEmpName(username);
    }
    
    public Long getEmpIdByPrincipal(Principal principal) {
        // Principal에서 username (혹은 email 등)을 가져와 Employee를 조회
        String empName = principal.getName();
        
        // 예시로 username이 Employee의 empId와 연관된다고 가정
        Employee employee = empAlarmsRepository.findByEmpName(empName)
                .orElseThrow(() -> new IllegalArgumentException("사용자를 찾을 수 없습니다."));
        
        return employee.getEmpId();
    }
}



package com.codenal.meeting.service;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.codenal.alarms.service.AlarmsService;
import com.codenal.employee.domain.Employee;
import com.codenal.employee.repository.EmployeeRepository;
import com.codenal.meeting.domain.MeetingRoom;
import com.codenal.meeting.domain.MeetingRoomDto;
import com.codenal.meeting.domain.MeetingRoomReserve;
import com.codenal.meeting.domain.MeetingRoomReserveDto;
import com.codenal.meeting.domain.MeetingRoomTime;
import com.codenal.meeting.domain.MeetingRoomTimeDto;
import com.codenal.meeting.repository.MeetingRoomRepository;
import com.codenal.meeting.repository.MeetingRoomReserveRepository;
import com.codenal.meeting.repository.MeetingRoomTimeRepository;

@Service
public class MeetingRoomService {
	
	 private static final Logger logger = LoggerFactory.getLogger(MeetingRoomService.class);

	private MeetingRoomRepository meetingRoomRepository;
	private MeetingRoomTimeRepository meetingRoomTimeRepository;
	private MeetingRoomReserveRepository meetingRoomReserveRepository;
	private EmployeeRepository employeeRepository;
	private AlarmsService alarmsService; 

	@Autowired
	public MeetingRoomService(MeetingRoomRepository meetingRoomRepository, 
			MeetingRoomTimeRepository meetingRoomTimeRepository,
			MeetingRoomReserveRepository meetingRoomReserveRepository, 
			EmployeeRepository employeeRepository, 
			AlarmsService alarmsService) {
		this.meetingRoomRepository = meetingRoomRepository;
		this.meetingRoomTimeRepository = meetingRoomTimeRepository;
		this.meetingRoomReserveRepository = meetingRoomReserveRepository;
		this.employeeRepository = employeeRepository;
		this.alarmsService = alarmsService; 
	}

	// 예약 변경
	public MeetingRoomReserve meetingRoomReserveModify(MeetingRoomReserveDto dto) {

		MeetingRoomTime time = meetingRoomTimeRepository.findByMeetingRoomTimeNo(dto.getMeeting_room_reserve_time_no());

		MeetingRoomTimeDto timeToDto = new MeetingRoomTimeDto().toDto(time);

		MeetingRoomReserve reserve = meetingRoomReserveRepository.findByMeetingRoomReserveNo(dto.getMeeting_room_reserve_no());

		Employee employee = reserve.getEmployee();

		MeetingRoomReserveDto reserveDto = MeetingRoomReserveDto.builder()
				.meeting_room_reserve_no(reserve.getMeetingRoomReserveNo())
				.meeting_room_no(reserve.getMeetingRoom().getMeetingRoomNo())
				.emp_id(employee.getEmpId())
				.meeting_room_reserve_date(reserve.getMeetingRoomReserveDate())
				.meeting_room_start_time(reserve.getMeetingRoomStartTime())
				.meeting_room_end_time(reserve.getMeetingRoomEndTime())
				.meeting_room_reserve_time_no(reserve.getMeetingRoomReserveTimeNo())
				.build();
		reserveDto.setMeeting_room_no(dto.getMeeting_room_no());
		reserveDto.setMeeting_room_reserve_date(dto.getMeeting_room_reserve_date());
		reserveDto.setMeeting_room_start_time(timeToDto.getMeeting_room_start_time());
		reserveDto.setMeeting_room_end_time(timeToDto.getMeeting_room_end_time());
		reserveDto.setMeeting_room_reserve_time_no(dto.getMeeting_room_reserve_time_no());

		MeetingRoomReserve modify = reserveDto.toEntity(employee);
		MeetingRoomReserve result = meetingRoomReserveRepository.save(modify);
		return result;
	}

	// 회의실 업데이트
	public MeetingRoom modifyMeetingRoom(MeetingRoomDto dto) {
		MeetingRoom room = meetingRoomRepository.findByMeetingRoomNo(dto.getMeeting_room_no());
		MeetingRoomDto roomdto = MeetingRoomDto.builder()
				.meeting_room_no(room.getMeetingRoomNo())
				.meeting_room_name(room.getMeetingRoomName())
				.meeting_room_place(room.getMeetingRoomPlace())
				.meeting_room_amenity(room.getMeetingRoomAmenity())
				.meeting_room_img(room.getMeetingRoomImg())
				.build();
		roomdto.setMeeting_room_name(dto.getMeeting_room_name());
		roomdto.setMeeting_room_place(dto.getMeeting_room_place());
		roomdto.setMeeting_room_amenity(dto.getMeeting_room_amenity());
		if(dto.getMeeting_room_img() != "") {
			roomdto.setMeeting_room_img(dto.getMeeting_room_img());
		} else {
			roomdto.setMeeting_room_img(room.getMeetingRoomImg());
		}
		MeetingRoom modify = roomdto.toEntity();
		MeetingRoom result = meetingRoomRepository.save(modify);
		return result;
	}

	// 회의실 하나 출력
	public MeetingRoomDto selectMeetingRoom(Long no) {
		MeetingRoom room = meetingRoomRepository.findByMeetingRoomNo(no);
		MeetingRoomDto dto = MeetingRoomDto.builder()
				.meeting_room_no(room.getMeetingRoomNo())
				.meeting_room_name(room.getMeetingRoomName())
				.meeting_room_place(room.getMeetingRoomPlace())
				.meeting_room_amenity(room.getMeetingRoomAmenity())
				.meeting_room_img(room.getMeetingRoomImg())
				.build();
		return dto;
	}

	// 예약 취소
	public int ReserveDelete(Long reserveNo) {
		int result = 0;

		try {
			meetingRoomReserveRepository.deleteById(reserveNo);
			result = 1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	// 예약 리스트 조회
	public List<MeetingRoomReserveDto> MeetingRoomReserveList(Long empId){
		List<MeetingRoomReserve> reserve = meetingRoomReserveRepository.findByEmployeeEmpId(empId);

		List<MeetingRoomReserveDto> reserveDto = new ArrayList<MeetingRoomReserveDto>();
		for(MeetingRoomReserve r : reserve) {
			MeetingRoomReserveDto toDto = new MeetingRoomReserveDto().toDto(r);
			reserveDto.add(toDto);
		}
		System.out.println(reserveDto);
		return reserveDto;
	}

	// 회의실 삭제
	public int MeetingRoomDelete(Long roomNo) {
		int result = 0;
		try {
			meetingRoomRepository.deleteById(roomNo);
			result = 1;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	// 회의실 추가
	public MeetingRoom MeetingRoomCreate(MeetingRoomDto dto) {
		MeetingRoom create = MeetingRoom.builder()
				.meetingRoomName(dto.getMeeting_room_name())
				.meetingRoomPlace(dto.getMeeting_room_place())
				.meetingRoomAmenity(dto.getMeeting_room_amenity())
				.meetingRoomImg(dto.getMeeting_room_img())
				.build();
		return meetingRoomRepository.save(create);
	}

	// 예약 가능 시간 추가
	public void MeetingRoomTimeCreate(LocalTime[][] time) {

		MeetingRoom meetingRoom = meetingRoomRepository.findBy();
		MeetingRoomDto meetingRoomDto = new MeetingRoomDto().toDto(meetingRoom);
		System.out.println(meetingRoomDto.getMeeting_room_no());
		String[] ampm = new String[time.length];
		LocalTime standard = LocalTime.of(12, 00);
		for(int i=0; i<time.length; i++) {
			int compare = time[i][1].compareTo(standard);
			if(compare <= (-1) ) {
				ampm[i] = "오전";
			} else {
				ampm[i] = "오후";
			}
		}
		for(int i=0; i<time.length; i++) {
			MeetingRoomTime times = MeetingRoomTime.builder()
					.meetingRoomNo(meetingRoomDto.getMeeting_room_no())
					.meetingRoomStartTime(time[i][0])
					.meetingRoomEndTime(time[i][1])
					.meetingRoomAmpm(ampm[i])
					.build();
			meetingRoomTimeRepository.save(times);
		}


	}

	// 회의실 예약
	public MeetingRoomReserve meetingRoomReserve(MeetingRoomReserveDto dto) {
	    // 예약 시간 정보 조회
	    MeetingRoomTime time = meetingRoomTimeRepository.findByMeetingRoomTimeNo(dto.getMeeting_room_reserve_time_no());
	    MeetingRoomTimeDto timeToDto = new MeetingRoomTimeDto().toDto(time);

	    // 사원 정보 조회
	    Employee employee = employeeRepository.findByEmpId(dto.getEmp_id());

	    // 회의실 정보 조회
	    MeetingRoom meetingRoom = meetingRoomRepository.findByMeetingRoomNo(dto.getMeeting_room_no());
	    if (meetingRoom == null) {
	        throw new IllegalArgumentException("해당 번호의 회의실을 찾을 수 없습니다: " + dto.getMeeting_room_no());
	    }

	    // 예약 생성
	    MeetingRoomReserve reserve = MeetingRoomReserve.builder()
	            .meetingRoom(meetingRoom)  // 회의실 정보 포함
	            .employee(employee)        // 사원 정보 포함
	            .meetingRoomReserveDate(dto.getMeeting_room_reserve_date())
	            .meetingRoomStartTime(timeToDto.getMeeting_room_start_time())
	            .meetingRoomEndTime(timeToDto.getMeeting_room_end_time())
	            .meetingRoomReserveTimeNo(dto.getMeeting_room_reserve_time_no())
	            .build();

	    // 예약 저장
	    MeetingRoomReserve savedReserve = meetingRoomReserveRepository.save(reserve);

	    // 알림 생성
	    if (savedReserve.getMeetingRoomReserveDate().isEqual(LocalDate.now())) {
	        LocalTime now = LocalTime.now();
	        if (now.isAfter(LocalTime.of(9, 0))) {
	            alarmsService.createImmediateAlarm(savedReserve, meetingRoom);
	          //  logger.info(savedReserve.getMeetingRoomReserveNo());
	        }
	    } else {
	        alarmsService.scheduleAlarm(savedReserve, meetingRoom);
	    }

	    return savedReserve;
	}


	// 해당 날짜 회의실 예약 조회
	public List<MeetingRoomReserve> getReservationsForDate(LocalDate date) {
		return meetingRoomReserveRepository.findByMeetingRoomReserveDate(date);
	}

	// 회의실 리스트 뽑기
	public List<MeetingRoomDto> meetingRoomList() {
		List<MeetingRoom> mr = meetingRoomRepository.findAll();
		System.out.println(mr);
		List<MeetingRoomDto> mrDto = new ArrayList<MeetingRoomDto>();
		for(MeetingRoom m : mr) {
			MeetingRoomDto mrToDto = new MeetingRoomDto().toDto(m);
			mrDto.add(mrToDto);
		}
		//		MeetingRoomTime meetingTime = meetingRoomTimeRepository.findByMeetingRoomTimeNo(mrDto.get(0).getMeeting_room_no());
		return mrDto;
	}

	// 회의실 예약 시간 리스트 뽑기
	public List<MeetingRoomTimeDto> meetingRoomTimeList(){
		List<MeetingRoomTime> time = meetingRoomTimeRepository.findAll();
		List<MeetingRoomTimeDto> timeDto = new ArrayList<MeetingRoomTimeDto>();
		for(MeetingRoomTime t : time) {
			MeetingRoomTimeDto timeToDto = new MeetingRoomTimeDto().toDto(t);
			//			SimpleDateFormat format = new SimpleDateFormat("hh:mm");
			//			String hh = format.format(timeToDto.getMeeting_room_start_time());
			//			System.out.println(timeToDto.getMeeting_room_start_time());
			timeDto.add(timeToDto);
		}
		System.out.println(timeDto);
		return timeDto;
	}

}



<html xmlns:th="http://www.thymeleaf.org"
	xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout">

<body>
	<div th:fragment="topbar" th:remove="tag">
		<header id="page-topbar">
			<div class="layout-width">
				<div class="navbar-header">
					<div class="d-flex">
						<!-- LOGO -->
						<div class="navbar-brand-box horizontal-logo">
							<a href="/" class="logo logo-dark"> <span class="logo-sm">
									<img src="/assets/images/logo-sm.png" alt="" height="22">
							</span> <span class="logo-lg"> <img
									src="/assets/images/logo-dark.png" alt="" height="17">
							</span>
							</a> <a href="/" class="logo logo-light"> <span class="logo-sm">
									<img src="/assets/images/logo-sm.png" alt="" height="22">
							</span> <span class="logo-lg"> <img
									src="/assets/images/logo-light.png" alt="" height="17">
							</span>
							</a>
						</div>

						<button type="button"
							class="btn btn-sm px-3 fs-16 header-item vertical-menu-btn topnav-hamburger"
							id="topnav-hamburger-icon">
							<span class="hamburger-icon"> <span></span> <span></span>
								<span></span>
							</span>
						</button>

						<!-- App Search-->
						<!-- <form class="app-search d-none d-md-block">
							<div class="position-relative">
								<input type="text" class="form-control" placeholder="Search..." autocomplete="off"
									id="search-options" value="">
								<span class="mdi mdi-magnify search-widget-icon"></span>
								<span class="mdi mdi-close-circle search-widget-icon search-widget-icon-close d-none"
									id="search-close-options"></span>
							</div>
							<div class="dropdown-menu dropdown-menu-lg" id="search-dropdown">
								<div data-simplebar style="max-height: 320px;">
									item
									<div class="dropdown-header">
										<h6 class="text-overflow text-muted mb-0 text-uppercase">Recent Searches</h6>
									</div>

									<div class="dropdown-item bg-transparent text-wrap">
										<a href="index.html" class="btn btn-soft-secondary btn-sm btn-rounded">how to
											setup <i class="mdi mdi-magnify ms-1"></i></a>
										<a href="index.html" class="btn btn-soft-secondary btn-sm btn-rounded">buttons
											<i class="mdi mdi-magnify ms-1"></i></a>
									</div>
									item
									<div class="dropdown-header mt-2">
										<h6 class="text-overflow text-muted mb-1 text-uppercase">Pages</h6>
									</div>

									item
									<a href="javascript:void(0);" class="dropdown-item notify-item">
										<i class="ri-bubble-chart-line align-middle fs-18 text-muted me-2"></i>
										<span>Analytics Dashboard</span>
									</a>

									item
									<a href="javascript:void(0);" class="dropdown-item notify-item">
										<i class="ri-lifebuoy-line align-middle fs-18 text-muted me-2"></i>
										<span>Help Center</span>
									</a>

									item
									<a href="javascript:void(0);" class="dropdown-item notify-item">
										<i class="ri-user-settings-line align-middle fs-18 text-muted me-2"></i>
										<span>My account settings</span>
									</a>

									item
									<div class="dropdown-header mt-2">
										<h6 class="text-overflow text-muted mb-2 text-uppercase">Members</h6>
									</div>

									<div class="notification-list">
										item
										<a href="javascript:void(0);" class="dropdown-item notify-item py-2">
											<div class="d-flex">
												<img src="/assets/images/users/avatar-2.jpg"
													class="me-3 rounded-circle avatar-xs" alt="user-pic">
												<div class="flex-1">
													<h6 class="m-0">Angela Bernier</h6>
													<span class="fs-11 mb-0 text-muted">Manager</span>
												</div>
											</div>
										</a>
										item
										<a href="javascript:void(0);" class="dropdown-item notify-item py-2">
											<div class="d-flex">
												<img src="/assets/images/users/avatar-3.jpg"
													class="me-3 rounded-circle avatar-xs" alt="user-pic">
												<div class="flex-1">
													<h6 class="m-0">David Grasso</h6>
													<span class="fs-11 mb-0 text-muted">Web Designer</span>
												</div>
											</div>
										</a>
										item
										<a href="javascript:void(0);" class="dropdown-item notify-item py-2">
											<div class="d-flex">
												<img src="/assets/images/users/avatar-5.jpg"
													class="me-3 rounded-circle avatar-xs" alt="user-pic">
												<div class="flex-1">
													<h6 class="m-0">Mike Bunch</h6>
													<span class="fs-11 mb-0 text-muted">React Developer</span>
												</div>
											</div>
										</a>
									</div>
								</div>

								<div class="text-center pt-3 pb-1">
									<a href="/pages-search-results" class="btn btn-primary btn-sm">View All Results
										<i class="ri-arrow-right-line ms-1"></i></a>
								</div>
							</div>
						</form> -->
					</div>

					<div class="d-flex align-items-center">






						<!-- <div class="dropdown topbar-head-dropdown ms-1 header-item">
							<button type="button" class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle"
								data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

								<i class='bx bx-category-alt fs-22'></i>
							</button>
							<div class="dropdown-menu dropdown-menu-lg p-0 dropdown-menu-end">
								<div
									class="p-3 border-top-0 border-start-0 border-end-0 border-dashed border">
									<div class="row align-items-center">
										<div class="col">
											<h6 class="m-0 fw-semibold fs-15">Web Apps</h6>
										</div>
										<div class="col-auto">
											<a href="#!" class="btn btn-sm btn-soft-info"> View All
												Apps <i class="ri-arrow-right-s-line align-middle"></i>
											</a>
										</div>
									</div>
								</div>

								<div class="p-2">
									<div class="row g-0">
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/github.png" alt="Github"> <span>GitHub</span>
											</a>
										</div>
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/bitbucket.png" alt="bitbucket">
												<span>Bitbucket</span>
											</a>
										</div>
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/dribbble.png" alt="dribbble">
												<span>Dribbble</span>
											</a>
										</div>
									</div>

									<div class="row g-0">
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/dropbox.png" alt="dropbox">
												<span>Dropbox</span>
											</a>
										</div>
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/mail_chimp.png" alt="mail_chimp">
												<span>Mail Chimp</span>
											</a>
										</div>
										<div class="col">
											<a class="dropdown-icon-item" href="#!"> <img
												src="/assets/images/brands/slack.png" alt="slack"> <span>Slack</span>
											</a>
										</div>
									</div>
								</div>
							</div>
						</div> -->



						<div class="ms-1 header-item d-none d-sm-flex">
							<button type="button"
								class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle"
								data-toggle="fullscreen">
								<i class='bx bx-fullscreen fs-22'></i>
							</button>
						</div>

						<div class="ms-1 header-item d-none d-sm-flex">
							<button type="button"
								class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle light-dark-mode">
								<i class='bx bx-moon fs-22'></i>
							</button>
						</div>

						<!----------------------------------- 알림 시작 ----------------------------------------->
						<div class="dropdown topbar-head-dropdown ms-1 header-item"
							id="notificationDropdown">
							<!-- 알림 아이콘 -->
							<button type="button"
								class="btn btn-icon btn-topbar btn-ghost-secondary rounded-circle"
								id="page-header-notifications-dropdown"
								data-bs-toggle="dropdown" aria-haspopup="true"
								aria-expanded="false">
								<i class='bx bx-bell fs-22'></i> <span id="notification-count"
									class="position-absolute topbar-badge fs-10 translate-middle badge rounded-pill bg-danger">
									<span th:text="${alarms != null} ? ${alarms.size()} : 0"></span>
								</span>
							</button>

							<!-- 알림 드롭다운 시작 -->
							<div class="dropdown-menu dropdown-menu-lg dropdown-menu-end p-0"
								aria-labelledby="page-header-notifications-dropdown">
								<div class="dropdown-head bg-primary bg-pattern rounded-top">
									<div class="p-3">
										<div class="row align-items-center">
											<div class="col">
												<h6 class="m-0 fs-16 fw-semibold text-white">알림</h6>
											</div>
										</div>
									</div>

									<div class="px-2 pt-2">
										<ul class="nav nav-tabs dropdown-tabs nav-tabs-custom"
											data-dropdown-tabs="true" id="notificationItemsTab"
											role="tablist">
											<li class="nav-item waves-effect waves-light"><a
												class="nav-link active" data-bs-toggle="tab"
												href="#all-noti-tab" role="tab" aria-selected="true">전체</a>
											</li>
											<li class="nav-item waves-effect waves-light"><a
												class="nav-link" data-bs-toggle="tab" href="#schedule-tab"
												role="tab" aria-selected="false">일정</a></li>
											<li class="nav-item waves-effect waves-light"><a
												class="nav-link" data-bs-toggle="tab" href="#approval-tab"
												role="tab" aria-selected="false">결재</a></li>
										</ul>
									</div>
								</div>

								<form class="tab-content position-relative"
									id="notificationItemsTabContent">
									<!-- 전체 알림 탭 -->
									<div class="tab-pane fade show active py-2 ps-2"
										id="all-noti-tab" role="tabpanel">
										<div data-simplebar style="max-height: 300px;" class="pe-2">
											<!-- 알림 반복 -->
											<div th:if="${alarms != null}" th:each="alarm : ${alarms}"
												class="text-reset notification-item d-block dropdown-item position-relative">
												<div class="d-flex">
													<div class="avatar-xs me-3">
														<span
															class="avatar-title bg-soft-info text-info rounded-circle fs-16">
															<i class='bx bx-message-square-dots'></i>
														</span>
													</div>
													<div class="flex-1">
														<a class="stretched-link">
															<h6 class="mt-0 mb-2 lh-base">
																<b th:text="${alarm.alarmContext}"></b>
															</h6>
														</a>
														<p class="mb-0 fs-11 fw-medium text-uppercase text-muted">
															<i class="mdi mdi-clock-outline"></i> <span
																th:text="${#temporals.format(alarm.alarmCreateTime, 'yyyy-MM-dd HH:mm')}"></span>
														</p>
													</div>
													<div class="px-2 fs-15">
														<div class="form-check notification-check">
															<input class="form-check-input" type="checkbox"
																th:checked="${alarm.alarmIsRead == 'Y'}"> <label
																class="form-check-label"></label>
														</div>
													</div>
												</div>
												<button class="btn btn-sm btn-link text-danger"
													th:onclick="'/api/alarms/delete/' + ${alarm.alarmNo}">
													삭제</button>
											</div>
											<!-- 알림 반복 끝 -->

											<!-- 알림이 없는 경우 -->
											<div th:if="${#lists.isEmpty(alarms)}"
												class="empty-notification-elem">
												<div class="w-25 w-sm-50 pt-3 mx-auto">
													<img src="/assets/images/svg/bell.svg" class="img-fluid"
														alt="user-pic">
												</div>
												<div class="text-center pb-5 mt-2">
													<h6 class="fs-18 fw-semibold lh-base">알림이 없습니다.</h6>
												</div>
											</div>
										</div>
									</div>
								</form>
							</div>
						</div>
						<!-- 알림 드롭 메뉴 끝 -->
						<!----------------------------------- 알림 끝 ----------------------------------------->



						<div class="dropdown ms-sm-3 header-item topbar-user">
							<button type="button" class="btn" id="page-header-user-dropdown"
								data-bs-toggle="dropdown" aria-haspopup="true"
								aria-expanded="false">
								<span class="d-flex align-items-center"> <img
									class="rounded-circle header-profile-user"
									src="/assets/images/users/avatar-1.jpg" alt="Header Avatar">
									<span class="text-start ms-xl-2"> <span
										class="d-none d-xl-inline-block ms-1 fw-medium user-name-text">
											하츄핑 <span>대리</span>
									</span> <span
										class="d-none d-xl-block ms-1 fs-12 text-muted user-name-sub-text">
											웹 개발팀 </span>
								</span>
								</span>
							</button>
							<div class="dropdown-menu dropdown-menu-end">
								<!-- item-->
								<h6 class="dropdown-header">어서오세요!</h6>
								<a class="dropdown-item" href="/pages-profile"><i
									class="mdi mdi-account-circle text-muted fs-16 align-middle me-1"></i>
									<span class="align-middle">마이페이지</span></a> <a
									class="dropdown-item" href="/apps-chat"><i
									class="mdi mdi-message-text-outline text-muted fs-16 align-middle me-1"></i>
									<span class="align-middle">채팅</span></a>

								<div class="dropdown-divider"></div>
								<a class="dropdown-item" href="/pages-profile-settings"><i
									class="mdi mdi-cog-outline text-muted fs-16 align-middle me-1"></i>
									<span class="align-middle">개인정보 수정</span></a> <a
									class="dropdown-item" href="/auth-signin-basic"><i
									class="mdi mdi-logout text-muted fs-16 align-middle me-1"></i>
									<span class="align-middle" data-key="t-logout">로그아웃</span></a>

							</div>
						</div>
					</div>
				</div>
			</div>
		</header>

		<!-- removeNotificationModal -->
		<div id="removeNotificationModal" class="modal fade zoomIn"
			tabindex="-1" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="btn-close" data-bs-dismiss="modal"
							aria-label="Close" id="NotificationModalbtn-close"></button>
					</div>
					<div class="modal-body">
						<div class="mt-2 text-center">
							<lord-icon src="https://cdn.lordicon.com/gsqxdxog.json"
								trigger="loop" colors="primary:#f7b84b,secondary:#f06548"
								style="width:100px;height:100px"></lord-icon>
							<div class="mt-4 pt-2 fs-15 mx-4 mx-sm-5">
								<h4>Are you sure ?</h4>
								<p class="text-muted mx-4 mb-0">Are you sure you want to
									remove this Notification ?</p>
							</div>
						</div>
						<div class="d-flex gap-2 justify-content-center mt-4 mb-2">
							<button type="button" class="btn w-sm btn-light"
								data-bs-dismiss="modal">Close</button>
							<button type="button" class="btn w-sm btn-danger"
								id="delete-notification">Yes, Delete It!</button>
						</div>
					</div>

				</div>
				<!-- /.modal-content -->
			</div>
			<!-- /.modal-dialog -->
		</div>
		<!-- /.modal -->
	</div>

	<script>
	
	
</script>


</body>

</html>